name: Node.js CI

on: ["push"]

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      OPENWEATHERMAP_KEY: ${{ secrets.OPENWEATHERMAP_KEY }}
      STEAM_API_KEY: ${{ secrets.STEAM_API_KEY }}
      STEAM_USER_ID: ${{ secrets.STEAM_USER_ID }}
      STRAVA_CLIENT_ID: ${{ secrets.STRAVA_CLIENT_ID }}
      STRAVA_CLIENT_SECRET: ${{ secrets.STRAVA_CLIENT_SECRET }}

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16.13.0

      - uses: actions/cache@v3
        with:
          path: |
            - ~/.npm
            - ~/.cache/Cypress
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: |
          npm run eslint
          npm run lint:styles:report

      - name: Build
        run: |
          npm run build -- --base-href=https://arnaudflaesch.github.io/CashManager/
          cp dist/index.html dist/404.html

      - name: Test
        run: npm run test

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull database image
        run: |
          docker pull postgres:13.2-alpine
          docker run -p 5432:5432 -d -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=dash_test postgres:13.2-alpine

      - name: Pull backend image
        run: |
          if [[ "$(git ls-remote --heads https://github.com/ArnaudFlaesch/Dash-WebServices ${GITHUB_REF#refs/*/} | wc -l)" == 1 && ${GITHUB_REF#refs/*/} != 'main' && ${GITHUB_REF#refs/*/} != 'main' ]]; then
            docker pull arnaudf93/dashwebservices:${GITHUB_REF#refs/*/}
            docker run -p 8080:8080 -d --network="host" -e POSTGRES_URL=jdbc:postgresql://localhost:5432/dash_test -e OPENWEATHERMAP_KEY=${OPENWEATHERMAP_KEY} -e STRAVA_CLIENT_ID=${STRAVA_CLIENT_ID} -e STRAVA_CLIENT_SECRET=${STRAVA_CLIENT_SECRET} -e STEAM_USER_ID=${STEAM_USER_ID} -e STEAM_API_KEY=${STEAM_API_KEY} arnaudf93/dashwebservices:${GITHUB_REF#refs/*/}
          else
            docker pull arnaudf93/dashwebservices:latest
            docker run -p 8080:8080 -d --network="host" -e POSTGRES_URL=jdbc:postgresql://localhost:5432/dash_test -e OPENWEATHERMAP_KEY=${OPENWEATHERMAP_KEY} -e STRAVA_CLIENT_ID=${STRAVA_CLIENT_ID} -e STRAVA_CLIENT_SECRET=${STRAVA_CLIENT_SECRET} -e STEAM_USER_ID=${STEAM_USER_ID} -e STEAM_API_KEY=${STEAM_API_KEY} arnaudf93/dashwebservices:latest
          fi

      - name: E2E Tests
        run: |
          npm run test:e2e:ci

      - name: Generate test report
        if: always()
        run: |
          mkdir cypress/screenshots || true
          npm run report:merge
          npm run report:generate
          npm run report:copyScreenshots

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Cypress report
          path: cypress/reports/html

      - name: Send coverage report
        run: |
          curl -Os https://uploader.codecov.io/latest/linux/codecov
          chmod +x codecov
          ./codecov -t ${{ secrets.CODECOV_TOKEN }} -F coverage-jest

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Deploy with gh-pages
        #if: success() && github.ref == 'refs/heads/main'
        run: |
          git remote set-url origin https://git:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
          npx gh-pages-clean
          npx gh-pages -d dist -u "github-actions-bot <support+actions@github.com>"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
