name: Node.js CI

on: ['push', 'workflow_dispatch']

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22.11.0
          cache: 'npm'

      - name: Cache node modules
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: |
          npm run eslint
          npm run lint:styles

      - name: Build
        run: |
          npm run build -- --base-href=https://arnaudflaesch.github.io/CashManager/
          cp public/index.html public/404.html

      - name: Test
        id: application-tests
        run: npm run test

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Start database image
        run: |
          docker run -p 5432:5432 -d -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=dash postgres:16.3-alpine3.20

      - name: Start backend image
        run: |
          [[ "$(git ls-remote --heads https://github.com/ArnaudFlaesch/Dash-WebServices ${{github.ref_name}} | wc -l)" == 1 && ${{github.ref_name}} != 'main' ]] && tagName=${{github.ref_name}} || tagName=latest
          docker run -p 8080:8080 -d --network="host" -e POSTGRES_PASSWORD=postgres ghcr.io/arnaudflaesch/dash-webservices:$tagName

      - name: E2E Tests
        uses: cypress-io/github-action@v6
        id: e2e-tests
        with:
          browser: chrome
          config-file: cypress-test.config.ts
          start: npm start
          wait-on: 'http://localhost:4200'

      - name: Generate test report
        id: generate-e2e-report
        if: always() && steps.e2e-tests.outcome == 'failure'
        run: |
          mkdir cypress/screenshots || true
          npm run report:merge
          npm run report:generate
          npm run report:copyScreenshots

      - name: Upload Cypress report
        uses: actions/upload-artifact@v4
        if: always() && steps.generate-e2e-report.outcome == 'success'
        with:
          name: Cypress report
          path: cypress/reports/html

      - name: Report coverage for Codecov
        uses: codecov/codecov-action@v5
        if: always() && steps.application-tests.outcome == 'success'
        with:
          directory: coverage-jest
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Report coverage for Codacy
        if: always() && steps.application-tests.outcome == 'success'
        run: |
          bash <(curl -Ls https://coverage.codacy.com/get.sh)
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5.1.0
        if: always() && steps.application-tests.outcome == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v3
        if: success() && github.ref_name == 'main'
        with:
          path: ./public

  deploy:
    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write # to deploy to Pages
      id-token: write # to verify the deployment originates from an appropriate source

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest
    needs: test
    if: success() && github.ref_name == 'main'

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  codacy-security-scan:
    permissions:
      contents: read
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status

    name: Codacy Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Execute Codacy Analysis CLI and generate a SARIF output with the security issues identified during the analysis
      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@v4.4
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          verbose: true
          output: results.sarif
          format: sarif
          # Adjust severity of non-security issues
          gh-code-scanning-compat: true
          # Force 0 exit code to allow SARIF file generation
          # This will handover control about PR rejection to the GitHub side
          max-allowed-issues: 2147483647

      # Upload the SARIF file generated in the previous step
      - name: Upload SARIF results file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
